import * as plotly from 'plotly.js-dist';
import * as fs from 'fs';
import * as createCsvWriter from 'csv-writer';

/* =====================================================
                    FUNCTIONS
===================================================== */
function extractInfo(solidityCode: string) {
  const funcPattern = /function\s+(\w+)\((.*?)\)/;
  const contractPattern = /contract\s+(\w+)/;

  const info: any = {};

  const lines = solidityCode.split('\n');

  let currentContract: string | null = null;

  for (const line of lines) {
    let match = line.match(contractPattern);
    if (match) {
      currentContract = match[1];
      info[currentContract] = {};
      continue;
    }

    match = line.match(funcPattern);

    if (match) {
      const funcName = match[1];
      const funcParams = match[2].split(',');

      info[currentContract!][funcName] = { params: funcParams, logic: [] };

      const startLine = lines.indexOf(line) + 1;
      let endLine = startLine;
      for (let i = startLine; i < lines.length; i++) {
        if (lines[i].includes('}')) {
          endLine = i;
          break;
        }
      }

      for (let i = startLine; i < endLine; i++) {
        info[currentContract!][funcName]['logic'].push(lines[i].trim());
      }
    }
  }

  return info;
}

/* =====================================================
                    CONSTANTS
===================================================== */
const solidityCode = '';

const contractMapping: any = {};

const info = extractInfo(solidityCode);

for (const contractName in info) {
  const contractInfo = info[contractName];
  for (const funcName in contractInfo) {
    const funcInfo = contractInfo[funcName];
    const taskName = `${contractName}.${funcName}`;
    contractMapping[taskName] = funcInfo['params'];
  }
}

console.log(contractMapping);

/* =====================================================
                    EXECUTION
===================================================== */
const contractFunctionCount: any = {};

for (const contractName in info) {
  const contractInfo = info[contractName];
  contractFunctionCount[contractName] = Object.keys(contractInfo).length;
}

const data = [{
  type: 'bar',
  x: Object.values(contractFunctionCount),
  y: Object.keys(contractFunctionCount),
  text: Object.values(contractFunctionCount),
  orientation: 'h',
  marker: {
    color: 'red',
    line: {
      color: 'black',
      width: 1.5,
    },
  },
  opacity: 0.6,
}];

const layout = {
  title: 'Function Usage in Smart Contract',
  xaxis: { title: 'Usage Count' },
  yaxis: { title: 'Function Name' },
};

plotly.newPlot('chart', data, layout);

const csvWriter = createCsvWriter.createObjectCsvWriter({
  path: 'contract_mapping.csv',
  header: [
    { id: 'function', title: 'Function' },
    { id: 'arguments', title: 'Arguments' },
  ],
});

const records = Object.entries(contractMapping).map(([key, value]) => ({ function: key, arguments: value }));

csvWriter.writeRecords(records);

fs.writeFileSync('contract_mapping.txt', Object.entries(contractMapping).map(([taskName, params]) => `${taskName}: ${params}\n`).join(''));

