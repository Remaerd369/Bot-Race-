import { spawnSync } from 'child_process';

interface VulnerabilityReport {
  id: string;
  title: string;
  description: string;
  solidityFile: string;
  line: string;
  address: string;
}

export class VulnerabilitiesDetector {
  constructor(private repoPath: string) {}

  getVulnerabilities(automatedFindings: any[]): VulnerabilityReport[] {
    let vulnerabilities: VulnerabilityReport[] = [];

    const proc = spawnSync(`node ${this.repoPath}/vulnerabilitiesDetector.js`, { encoding: 'utf-8' });
    const output = proc.stdout;

    const lines = output.split('\n');
    let idCounter = 1;
    for (const line of lines) {
      if (line && !automatedFindings.some(finding => finding.description === line)) {
        vulnerabilities.push({
          id: `C${idCounter}`,
          title: 'Custom Script',
          description: line,
          solidityFile: '',
          line: '',
          address: ''
        });
        idCounter++;
      }
    }

    vulnerabilities = vulnerabilities.filter(
      (vuln, index, self) => index === self.findIndex((t) => (
        t.description === vuln.description && t.solidityFile === vuln.solidityFile
      ))
    );

    return vulnerabilities;
  }
}
