import * as fs from 'fs';
import * as Plotly from 'plotly.js-dist';
import * as createCsvWriter from 'csv-writer';

interface FunctionInfo {
  params: string[];
  logic: string[];
}

interface ContractInfo {
  [functionName: string]: FunctionInfo;
}

interface ExtractedInfo {
  [contractName: string]: ContractInfo;
}

function extractInfo(solidityCode: string): ExtractedInfo {
  const funcPattern = /function\s+(\w+)\((.*?)\)/;
  const contractPattern = /contract\s+(\w+)/;

  const info: ExtractedInfo = {};

  const lines = solidityCode.split('\n');

  let currentContract: string | null = null;

  for (const line of lines) {
    const contractMatch = line.match(contractPattern);
    if (contractMatch) {
      currentContract = contractMatch[1];
      info[currentContract] = {};
      continue;
    }

    const funcMatch = line.match(funcPattern);
    if (funcMatch) {
      const funcName = funcMatch[1];
      const funcParams = funcMatch[2].split(',');

      info[currentContract!][funcName] = { params: funcParams, logic: [] };

      const startLine = lines.indexOf(line) + 1;
      const endLine = lines.slice(startLine).findIndex(l => l.includes('}')) + startLine;

      for (let i = startLine; i < endLine; i++) {
        info[currentContract!][funcName].logic.push(lines[i].trim());
      }
    }
  }

  return info;
}

const solidityCode = `
`;

const contractMapping: { [taskName: string]: string[] } = {};

const info = extractInfo(solidityCode);

for (const [contractName, contractInfo] of Object.entries(info)) {
  for (const [funcName, funcInfo] of Object.entries(contractInfo)) {
    const taskName = `${contractName}.${funcName}`;
    contractMapping[taskName] = funcInfo.params;
  }
}

console.log(contractMapping);

const contractFunctionCount: { [contractName: string]: number } = {};

for (const [contractName, contractInfo] of Object.entries(info)) {
  contractFunctionCount[contractName] = Object.keys(contractInfo).length;
}

const data = [{
  y: Object.keys(contractFunctionCount),
  x: Object.values(contractFunctionCount),
  type: 'bar',
  text: Object.values(contractFunctionCount).map(String),
  marker: {
    color: 'red',
    line: {
      color: 'black',
      width: 1.5,
    },
  },
  opacity: 0.6,
}];

const layout = {
  title: 'Function Usage in Smart Contract',
  xaxis: { title: 'Usage Count' },
  yaxis: { title: 'Function Name' },
};

Plotly.newPlot('chart', data, layout);

const csvWriter = createCsvWriter.createObjectCsvWriter({
  path: 'contract_mapping.csv',
  header: [
    { id: 'function', title: 'Function' },
    { id: 'arguments', title: 'Arguments' },
  ],
});

const records = Object.entries(contractMapping).map(([key, value]) => ({
  function: key,
  arguments: value,
}));

csvWriter.writeRecords(records);

fs.writeFileSync('contract_mapping.txt', Object.entries(contractMapping).map(([taskName, params]) => `${taskName}: ${params}\n`).join(''));
